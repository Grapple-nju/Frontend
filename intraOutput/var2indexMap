<org.apache.hadoop.hbase.avro.AvroUtil: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: int addScanner(org.apache.hadoop.hbase.client.ResultScanner)>

<org.apache.hadoop.hbase.avro.AvroServer: void <init>()>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerAddress hsaToASA(org.apache.hadoop.hbase.HServerAddress)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.client.ResultScanner getScanner(int)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.client.ResultScanner removeScanner(int)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.ARegionLoad hrlToARL(org.apache.hadoop.hbase.HServerLoad$RegionLoad)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer: void printUsageAndExit()>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerLoad hslToASL(org.apache.hadoop.hbase.HServerLoad)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerInfo hsiToASI(org.apache.hadoop.hbase.HServerInfo)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroServer: void printUsageAndExit(java.lang.String)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: void <init>(org.apache.hadoop.conf.Configuration)>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AColumn: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumn: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer: void doMain(java.lang.String[])>

<org.apache.hadoop.hbase.avro.generated.AColumn: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer: void main(java.lang.String[])>

<org.apache.hadoop.hbase.avro.generated.AColumn: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AClusterStatus csToACS(org.apache.hadoop.hbase.ClusterStatus)>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.ATableDescriptor htdToATD(org.apache.hadoop.hbase.HTableDescriptor)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.avro.util.Utf8 getHBaseVersion()>

<org.apache.hadoop.hbase.avro.generated.AColumn: void <clinit>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.AClusterStatus getClusterStatus()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.avro.generic.GenericArray listTables()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.ATableDescriptor describeTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: boolean isTableEnabled(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: boolean tableExists(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor describeFamily(java.nio.ByteBuffer,java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm[] values()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void createTable(org.apache.hadoop.hbase.avro.generated.ATableDescriptor)>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm valueOf(java.lang.String)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void deleteTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void modifyTable(java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.ATableDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void <init>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: void <init>(java.lang.String,int)>

<org.apache.hadoop.hbase.avro.generated.ADelete: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void <init>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AGet: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AGet: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AGet: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AGet: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void enableTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AGet: void <clinit>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void disableTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AIllegalArgument: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void flush(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AIOError: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void split(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void addFamily(java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AIOError: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void deleteFamily(java.nio.ByteBuffer,java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AIOError: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void modifyFamily(java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor)>

<org.apache.hadoop.hbase.avro.AvroServer: void <init>()>

<org.apache.hadoop.hbase.avro.AvroUtil: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer: void printUsageAndExit()>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerAddress hsaToASA(org.apache.hadoop.hbase.HServerAddress)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.ARegionLoad hrlToARL(org.apache.hadoop.hbase.HServerLoad$RegionLoad)>

<org.apache.hadoop.hbase.avro.AvroServer: void printUsageAndExit(java.lang.String)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerLoad hslToASL(org.apache.hadoop.hbase.HServerLoad)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerInfo hsiToASI(org.apache.hadoop.hbase.HServerInfo)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AClusterStatus csToACS(org.apache.hadoop.hbase.ClusterStatus)>

<org.apache.hadoop.hbase.avro.AvroServer: void doMain(java.lang.String[])>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: int addScanner(org.apache.hadoop.hbase.client.ResultScanner)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.ATableDescriptor htdToATD(org.apache.hadoop.hbase.HTableDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.client.ResultScanner getScanner(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.client.ResultScanner removeScanner(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: void <init>(org.apache.hadoop.conf.Configuration)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.avro.util.Utf8 getHBaseVersion()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.AClusterStatus getClusterStatus()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AColumn: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumn: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer: void main(java.lang.String[])>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm[] values()>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm valueOf(java.lang.String)>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: void <init>(java.lang.String,int)>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void <init>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.avro.generic.GenericArray listTables()>

<org.apache.hadoop.hbase.avro.generated.AColumn: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.ATableDescriptor describeTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.ADelete: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: boolean isTableEnabled(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumn: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: boolean tableExists(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumn: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor describeFamily(java.nio.ByteBuffer,java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void <init>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void <clinit>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void createTable(org.apache.hadoop.hbase.avro.generated.ATableDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AGet: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void deleteTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AGet: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void modifyTable(java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.ATableDescriptor)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void enableTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AGet: java.lang.Object get(int)>

<org.apache.hadoop.hbase.avro.generated.AGet: void put(int,java.lang.Object)>

<org.apache.hadoop.hbase.avro.generated.AGet: void <clinit>()>

