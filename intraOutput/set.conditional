<org.apache.hadoop.hbase.avro.AvroUtil: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: int addScanner(org.apache.hadoop.hbase.client.ResultScanner)>

<org.apache.hadoop.hbase.avro.AvroServer: void <init>()>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerAddress hsaToASA(org.apache.hadoop.hbase.HServerAddress)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.client.ResultScanner getScanner(int)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.client.ResultScanner removeScanner(int)>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.ARegionLoad hrlToARL(org.apache.hadoop.hbase.HServerLoad$RegionLoad)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: java.lang.Object get(int)>
0:(= $I$@para0 0)

<org.apache.hadoop.hbase.avro.AvroServer: void printUsageAndExit()>

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerLoad hslToASL(org.apache.hadoop.hbase.HServerLoad)>
0:(= $R$@ret6 soot.jimple.NullConstant@965450422)
1:(not $Z$@ret3)

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AServerInfo hsiToASI(org.apache.hadoop.hbase.HServerInfo)>

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void put(int,java.lang.Object)>
0:(= $I$@para0 0)

<org.apache.hadoop.hbase.avro.AvroServer: void printUsageAndExit(java.lang.String)>
0:(= $R$@para0 soot.jimple.NullConstant@965450422)

<org.apache.hadoop.hbase.avro.generated.AAlreadyExists: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)
31:(= $I$@para0 5)
63:(= $I$@para0 6)
127:(= $I$@para0 7)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: void <init>(org.apache.hadoop.conf.Configuration)>

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)
31:(= $I$@para0 5)
63:(= $I$@para0 6)
127:(= $I$@para0 7)

<org.apache.hadoop.hbase.avro.generated.AClusterStatus: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AColumn: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumn: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AColumn: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)

<org.apache.hadoop.hbase.avro.AvroServer: void doMain(java.lang.String[])>
0:(>= $I$@var$stack7 1)
1:(>= 0 $I$@varlen$)
3:(not $Z$@ret0)
8:$Z$@ret0
17:(not $Z$@ret0)
36:(not $Z$@ret0)
74:(not $Z$@ret0)
2:(>= 0 $I$@varlen$)
5:(not $Z$@ret0)
12:$Z$@ret0
25:(not $Z$@ret0)
52:(not $Z$@ret0)
106:(not $Z$@ret0)

<org.apache.hadoop.hbase.avro.AvroServer: void main(java.lang.String[])>

<org.apache.hadoop.hbase.avro.generated.AColumn: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)
31:(= $I$@para0 5)
63:(= $I$@para0 6)
127:(= $I$@para0 7)

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.AClusterStatus csToACS(org.apache.hadoop.hbase.ClusterStatus)>
0:(= $R$@ret2 soot.jimple.NullConstant@965450422)
1:(not $Z$@ret3)
3:(= $R$@ret8 soot.jimple.NullConstant@965450422)
7:(not $Z$@ret3)
4:(= $R$@ret5 soot.jimple.NullConstant@965450422)
9:(not $Z$@ret3)
2:(= $R$@ret6 soot.jimple.NullConstant@965450422)
5:(not $Z$@ret3)

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)
31:(= $I$@para0 5)
63:(= $I$@para0 6)
127:(= $I$@para0 7)

<org.apache.hadoop.hbase.avro.AvroUtil: org.apache.hadoop.hbase.avro.generated.ATableDescriptor htdToATD(org.apache.hadoop.hbase.HTableDescriptor)>
0:(<= $I$@ret5 0)
1:(not $Z$@ret3)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.avro.util.Utf8 getHBaseVersion()>

<org.apache.hadoop.hbase.avro.generated.AColumn: void <clinit>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.AClusterStatus getClusterStatus()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.avro.generic.GenericArray listTables()>
0:(>= 0 $I$@varlen$)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.ATableDescriptor describeTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: boolean isTableEnabled(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: boolean tableExists(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor describeFamily(java.nio.ByteBuffer,java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AColumnValue: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm[] values()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void createTable(org.apache.hadoop.hbase.avro.generated.ATableDescriptor)>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm valueOf(java.lang.String)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void deleteTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void modifyTable(java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.ATableDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AColumnFamilyDescriptor: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void <init>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: void <init>(java.lang.String,int)>

<org.apache.hadoop.hbase.avro.generated.ADelete: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)

<org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void <init>()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.ADelete: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AGet: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AGet: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)
31:(= $I$@para0 5)
63:(= $I$@para0 6)

<org.apache.hadoop.hbase.avro.generated.AGet: java.lang.Object get(int)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)

<org.apache.hadoop.hbase.avro.generated.AGet: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void enableTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AGet: void <clinit>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void disableTable(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AIllegalArgument: void <init>()>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void put(int,java.lang.Object)>
0:(= $I$@para0 0)
1:(= $I$@para0 1)
3:(= $I$@para0 2)
7:(= $I$@para0 3)
15:(= $I$@para0 4)
31:(= $I$@para0 5)
63:(= $I$@para0 6)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void flush(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor: void <clinit>()>

<org.apache.hadoop.hbase.avro.generated.AIOError: void <init>()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void split(java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void addFamily(java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AIOError: org.apache.avro.Schema getSchema()>

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void deleteFamily(java.nio.ByteBuffer,java.nio.ByteBuffer)>

<org.apache.hadoop.hbase.avro.generated.AIOError: java.lang.Object get(int)>
0:(= $I$@para0 0)

<org.apache.hadoop.hbase.avro.AvroServer$HBaseImpl: java.lang.Void modifyFamily(java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor)>

<org.apache.hadoop.hbase.avro.generated.AIOError: void put(int,java.lang.Object)>
0:(= $I$@para0 0)

