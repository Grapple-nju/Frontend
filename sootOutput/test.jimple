public class test extends java.lang.Object
{
    public static java.util.List tlist;

    static void <clinit>()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        <test: java.util.List tlist> = $r0;
        return;
    }

    public void <init>()
    {
        test this;

        this := @this: test;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        T $r0, t;
        java.io.IOException e, $r1;

        args := @parameter0: java.lang.String[];
        $r0 = new T;
        specialinvoke $r0.<T: void <init>()>();
        t = $r0;

     label0:
        virtualinvoke t.<T: void testFW()>();

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        e = $r1;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static int index(int)
    {
        int a, i, $i0, $i1;
        java.util.List $r0, $r3;
        java.lang.Object $r1;
        T $r2;

        a := @parameter0: int;
        i = 0;
        goto label2;

     label0:
        $r0 = <test: java.util.List tlist>;
        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i);
        $r2 = (T) $r1;
        $i0 = $r2.<T: int a>;
        if $i0 != a goto label1;

        return i;

     label1:
        i = i + 1;
        goto label3;

     label2:
        $r3 = <test: java.util.List tlist>;
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();
        if i < $i1 goto label0;

     label3:
        return -1;
    }
}
