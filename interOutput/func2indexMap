0 : <T: void <init>()>
1 : <T: void testTry()>
2 : <T: void throwexc()>
3 : <T: void testFW()>
4 : <T: java.io.FileWriter testCallFW(java.io.FileWriter)>
5 : <T: void testSwitch()>
6 : <T: T interfunc(T,T)>
7 : <T: T test(T)>
8 : <T: void call()>
9 : <T: void testlist()>
10 : <test: void <clinit>()>
11 : <test: void <init>()>
12 : <test: void main(java.lang.String[])>
0 : <T: void <init>()>
1 : <T: void testTry()>
2 : <T: void throwexc()>
3 : <T: void testFW()>
4 : <T: java.io.FileWriter testCallFW(java.io.FileWriter)>
5 : <T: void testSwitch()>
6 : <T: T interfunc(T,T)>
7 : <T: T test(T)>
8 : <T: void call()>
9 : <T: void testlist()>
10 : <test: void <clinit>()>
11 : <test: void <init>()>
12 : <test: void main(java.lang.String[])>
13 : <client.IntraGenerator: void <clinit>()>
14 : <client.IntraGenerator: void <init>()>
15 : <acteve.instrumentor.BodyEditor: void <init>()>
16 : <acteve.instrumentor.BodyEditor: void newBody(soot.Body,soot.SootMethod)>
17 : <acteve.instrumentor.BodyEditor: void newEmptyBody(soot.Body)>
18 : <acteve.instrumentor.BodyEditor: void newBody(soot.Body,soot.SootMethod,java.util.Iterator)>
19 : <acteve.instrumentor.BodyEditor: soot.Local freshLocal(soot.Type)>
20 : <acteve.instrumentor.BodyEditor: soot.Local freshLocal(soot.Type,java.lang.String)>
21 : <acteve.instrumentor.BodyEditor: boolean hasNext()>
22 : <acteve.instrumentor.BodyEditor: soot.jimple.Stmt next()>
23 : <acteve.instrumentor.BodyEditor: void insertStmt(soot.jimple.Stmt,boolean)>
24 : <acteve.instrumentor.BodyEditor: void insertStmtAfter(soot.jimple.Stmt)>
25 : <acteve.instrumentor.BodyEditor: void insertStmt(soot.jimple.Stmt)>
26 : <acteve.instrumentor.BodyEditor: void removeOriginalStmt()>
27 : <acteve.instrumentor.BodyEditor: void addTrap(soot.Trap)>
28 : <acteve.instrumentor.BodyEditor: void checkIfLastStmtChanged()>
29 : <acteve.instrumentor.BodyEditor: soot.jimple.Stmt originalStmt()>
30 : <acteve.instrumentor.BodyEditor: soot.SootMethod originalMethod()>
31 : <acteve.instrumentor.BodyEditor: int getTotalStmts()>
32 : <acteve.instrumentor.BodyEditor: int getChangedStmts()>
33 : <acteve.instrumentor.BodyEditor: void wrapTraps(soot.Body)>
34 : <acteve.instrumentor.G: void <clinit>()>
35 : <acteve.instrumentor.G: void <init>()>
36 : <acteve.instrumentor.G: java.lang.String modelClassNameFor(java.lang.String)>
37 : <acteve.instrumentor.G: java.lang.String modelInvokerClassNameFor(java.lang.String)>
38 : <acteve.instrumentor.G: soot.SootMethod symValueInjectorFor(soot.Type)>
39 : <acteve.instrumentor.G: soot.Body addBody(soot.SootMethod)>
40 : <acteve.instrumentor.G: void insertStmt(soot.jimple.Stmt)>
41 : <acteve.instrumentor.G: soot.Local newLocal(soot.Type)>
42 : <acteve.instrumentor.G: soot.Local newLocal(soot.Type,java.lang.String)>
43 : <acteve.instrumentor.G: void assign(soot.Value,soot.Value)>
44 : <acteve.instrumentor.G: void identity(soot.Local,soot.jimple.IdentityRef)>
45 : <acteve.instrumentor.G: void 'ret'(soot.Value)>
46 : <acteve.instrumentor.G: void iff(soot.jimple.ConditionExpr,soot.jimple.Stmt)>
47 : <acteve.instrumentor.G: void invoke(soot.jimple.InvokeExpr)>
48 : <acteve.instrumentor.G: void retVoid()>
49 : <acteve.instrumentor.G: void gotoo(soot.jimple.Stmt)>
50 : <acteve.instrumentor.G: void throww(soot.Local)>
51 : <acteve.instrumentor.G: void enterMonitor(soot.Local)>
52 : <acteve.instrumentor.G: void exitMonitor(soot.Local)>
53 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,soot.SootMethodRef)>
54 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate)>
55 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate,soot.Immediate)>
56 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,java.lang.String)>
57 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,java.lang.String,soot.Immediate)>
58 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,java.lang.String,soot.Immediate,soot.Immediate)>
59 : <acteve.instrumentor.G: soot.jimple.SpecialInvokeExpr specialInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate)>
60 : <acteve.instrumentor.G: soot.jimple.SpecialInvokeExpr specialInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate,soot.Immediate)>
61 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef)>
62 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,soot.Immediate)>
63 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,soot.Immediate,soot.Immediate)>
64 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,soot.Immediate,soot.Immediate,soot.Immediate)>
65 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,java.util.List)>
66 : <acteve.instrumentor.G: soot.jimple.InterfaceInvokeExpr interfaceInvokeExpr(soot.Local,soot.SootMethodRef)>
67 : <acteve.instrumentor.G: soot.jimple.InterfaceInvokeExpr interfaceInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate)>
68 : <acteve.instrumentor.G: soot.jimple.InterfaceInvokeExpr interfaceInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate,soot.Immediate)>
69 : <acteve.instrumentor.G: soot.jimple.CastExpr castExpr(soot.Local,soot.Type)>
70 : <acteve.instrumentor.G: soot.jimple.InstanceOfExpr instanceOfExpr(soot.Local,soot.Type)>
71 : <acteve.instrumentor.G: soot.jimple.EqExpr eqExpr(soot.Immediate,soot.Immediate)>
72 : <acteve.instrumentor.G: soot.jimple.NeExpr neExpr(soot.Immediate,soot.Immediate)>
73 : <acteve.instrumentor.G: soot.jimple.NewExpr newExpr(soot.RefType)>
74 : <acteve.instrumentor.G: soot.jimple.AddExpr addExpr(soot.Immediate,soot.Immediate)>
75 : <acteve.instrumentor.G: soot.jimple.SubExpr subExpr(soot.Immediate,soot.Immediate)>
76 : <acteve.instrumentor.G: soot.jimple.InstanceFieldRef instanceFieldRef(soot.Immediate,soot.SootFieldRef)>
77 : <acteve.instrumentor.G: soot.jimple.StaticFieldRef staticFieldRef(soot.SootFieldRef)>
78 : <acteve.instrumentor.G: soot.Local paramLocal(soot.SootMethod,int)>
79 : <acteve.instrumentor.G: java.util.List paramLocals(soot.SootMethod)>
80 : <acteve.instrumentor.G: soot.Local thisLocal(soot.SootMethod)>
81 : <acteve.instrumentor.G: java.util.List booleanConstants(int)>
82 : <acteve.instrumentor.G: void debug(soot.SootMethod,boolean)>
83 : <acteve.instrumentor.G: void debug(java.lang.String,boolean)>
84 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: void <clinit>()>
85 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: void <init>()>
86 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: int compare(soot.jimple.toolkits.annotation.logic.Loop,soot.jimple.toolkits.annotation.logic.Loop)>
87 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: int compare(java.lang.Object,java.lang.Object)>
88 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: void <init>(acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator)>
89 : <acteve.instrumentor.LoopTransformer: void <clinit>()>
90 : <acteve.instrumentor.LoopTransformer: void <init>()>
91 : <acteve.instrumentor.LoopTransformer: void transform(soot.SootMethod)>
92 : <acteve.instrumentor.LoopTransformer: void transform0(soot.SootMethod)>
93 : <acteve.instrumentor.LoopTransformer: void transform1(soot.SootMethod)>
94 : <acteve.instrumentor.LoopTransformer: void transform2(soot.SootMethod)>
95 : <acteve.instrumentor.LoopTransformer: void breakLoop(soot.jimple.toolkits.annotation.logic.Loop,soot.SootMethod)>
0 : <T: void <init>()>
1 : <T: void testTry()>
2 : <T: void throwexc()>
3 : <T: void testFW()>
4 : <T: java.io.FileWriter testCallFW(java.io.FileWriter)>
5 : <T: void testSwitch()>
6 : <T: T interfunc(T,T)>
7 : <T: T test(T)>
8 : <T: void call()>
9 : <T: void testlist()>
10 : <test: void <clinit>()>
11 : <test: void <init>()>
12 : <test: void main(java.lang.String[])>
13 : <client.IntraGenerator: void <clinit>()>
14 : <client.IntraGenerator: void <init>()>
15 : <acteve.instrumentor.BodyEditor: void <init>()>
16 : <acteve.instrumentor.BodyEditor: void newBody(soot.Body,soot.SootMethod)>
17 : <acteve.instrumentor.BodyEditor: void newEmptyBody(soot.Body)>
18 : <acteve.instrumentor.BodyEditor: void newBody(soot.Body,soot.SootMethod,java.util.Iterator)>
19 : <acteve.instrumentor.BodyEditor: soot.Local freshLocal(soot.Type)>
20 : <acteve.instrumentor.BodyEditor: soot.Local freshLocal(soot.Type,java.lang.String)>
21 : <acteve.instrumentor.BodyEditor: boolean hasNext()>
22 : <acteve.instrumentor.BodyEditor: soot.jimple.Stmt next()>
23 : <acteve.instrumentor.BodyEditor: void insertStmt(soot.jimple.Stmt,boolean)>
24 : <acteve.instrumentor.BodyEditor: void insertStmtAfter(soot.jimple.Stmt)>
25 : <acteve.instrumentor.BodyEditor: void insertStmt(soot.jimple.Stmt)>
26 : <acteve.instrumentor.BodyEditor: void removeOriginalStmt()>
27 : <acteve.instrumentor.BodyEditor: void addTrap(soot.Trap)>
28 : <acteve.instrumentor.BodyEditor: void checkIfLastStmtChanged()>
29 : <acteve.instrumentor.BodyEditor: soot.jimple.Stmt originalStmt()>
30 : <acteve.instrumentor.BodyEditor: soot.SootMethod originalMethod()>
31 : <acteve.instrumentor.BodyEditor: int getTotalStmts()>
32 : <acteve.instrumentor.BodyEditor: int getChangedStmts()>
33 : <acteve.instrumentor.BodyEditor: void wrapTraps(soot.Body)>
34 : <acteve.instrumentor.G: void <clinit>()>
35 : <acteve.instrumentor.G: void <init>()>
36 : <acteve.instrumentor.G: java.lang.String modelClassNameFor(java.lang.String)>
37 : <acteve.instrumentor.G: java.lang.String modelInvokerClassNameFor(java.lang.String)>
38 : <acteve.instrumentor.G: soot.SootMethod symValueInjectorFor(soot.Type)>
39 : <acteve.instrumentor.G: soot.Body addBody(soot.SootMethod)>
40 : <acteve.instrumentor.G: void insertStmt(soot.jimple.Stmt)>
41 : <acteve.instrumentor.G: soot.Local newLocal(soot.Type)>
42 : <acteve.instrumentor.G: soot.Local newLocal(soot.Type,java.lang.String)>
43 : <acteve.instrumentor.G: void assign(soot.Value,soot.Value)>
44 : <acteve.instrumentor.G: void identity(soot.Local,soot.jimple.IdentityRef)>
45 : <acteve.instrumentor.G: void 'ret'(soot.Value)>
46 : <acteve.instrumentor.G: void iff(soot.jimple.ConditionExpr,soot.jimple.Stmt)>
47 : <acteve.instrumentor.G: void invoke(soot.jimple.InvokeExpr)>
48 : <acteve.instrumentor.G: void retVoid()>
49 : <acteve.instrumentor.G: void gotoo(soot.jimple.Stmt)>
50 : <acteve.instrumentor.G: void throww(soot.Local)>
51 : <acteve.instrumentor.G: void enterMonitor(soot.Local)>
52 : <acteve.instrumentor.G: void exitMonitor(soot.Local)>
53 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,soot.SootMethodRef)>
54 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate)>
55 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate,soot.Immediate)>
56 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,java.lang.String)>
57 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,java.lang.String,soot.Immediate)>
58 : <acteve.instrumentor.G: soot.jimple.VirtualInvokeExpr virtualInvokeExpr(soot.Local,java.lang.String,soot.Immediate,soot.Immediate)>
59 : <acteve.instrumentor.G: soot.jimple.SpecialInvokeExpr specialInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate)>
60 : <acteve.instrumentor.G: soot.jimple.SpecialInvokeExpr specialInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate,soot.Immediate)>
61 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef)>
62 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,soot.Immediate)>
63 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,soot.Immediate,soot.Immediate)>
64 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,soot.Immediate,soot.Immediate,soot.Immediate)>
65 : <acteve.instrumentor.G: soot.jimple.StaticInvokeExpr staticInvokeExpr(soot.SootMethodRef,java.util.List)>
66 : <acteve.instrumentor.G: soot.jimple.InterfaceInvokeExpr interfaceInvokeExpr(soot.Local,soot.SootMethodRef)>
67 : <acteve.instrumentor.G: soot.jimple.InterfaceInvokeExpr interfaceInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate)>
68 : <acteve.instrumentor.G: soot.jimple.InterfaceInvokeExpr interfaceInvokeExpr(soot.Local,soot.SootMethodRef,soot.Immediate,soot.Immediate)>
69 : <acteve.instrumentor.G: soot.jimple.CastExpr castExpr(soot.Local,soot.Type)>
70 : <acteve.instrumentor.G: soot.jimple.InstanceOfExpr instanceOfExpr(soot.Local,soot.Type)>
71 : <acteve.instrumentor.G: soot.jimple.EqExpr eqExpr(soot.Immediate,soot.Immediate)>
72 : <acteve.instrumentor.G: soot.jimple.NeExpr neExpr(soot.Immediate,soot.Immediate)>
73 : <acteve.instrumentor.G: soot.jimple.NewExpr newExpr(soot.RefType)>
74 : <acteve.instrumentor.G: soot.jimple.AddExpr addExpr(soot.Immediate,soot.Immediate)>
75 : <acteve.instrumentor.G: soot.jimple.SubExpr subExpr(soot.Immediate,soot.Immediate)>
76 : <acteve.instrumentor.G: soot.jimple.InstanceFieldRef instanceFieldRef(soot.Immediate,soot.SootFieldRef)>
77 : <acteve.instrumentor.G: soot.jimple.StaticFieldRef staticFieldRef(soot.SootFieldRef)>
78 : <acteve.instrumentor.G: soot.Local paramLocal(soot.SootMethod,int)>
79 : <acteve.instrumentor.G: java.util.List paramLocals(soot.SootMethod)>
80 : <acteve.instrumentor.G: soot.Local thisLocal(soot.SootMethod)>
81 : <acteve.instrumentor.G: java.util.List booleanConstants(int)>
82 : <acteve.instrumentor.G: void debug(soot.SootMethod,boolean)>
83 : <acteve.instrumentor.G: void debug(java.lang.String,boolean)>
84 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: void <clinit>()>
85 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: void <init>()>
86 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: int compare(soot.jimple.toolkits.annotation.logic.Loop,soot.jimple.toolkits.annotation.logic.Loop)>
87 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: int compare(java.lang.Object,java.lang.Object)>
88 : <acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator: void <init>(acteve.instrumentor.LoopTransformer$MyLoopNestTreeComparator)>
89 : <acteve.instrumentor.LoopTransformer: void <clinit>()>
90 : <acteve.instrumentor.LoopTransformer: void <init>()>
91 : <acteve.instrumentor.LoopTransformer: void transform(soot.SootMethod)>
92 : <acteve.instrumentor.LoopTransformer: void transform0(soot.SootMethod)>
93 : <acteve.instrumentor.LoopTransformer: void transform1(soot.SootMethod)>
94 : <acteve.instrumentor.LoopTransformer: void transform2(soot.SootMethod)>
95 : <acteve.instrumentor.LoopTransformer: void breakLoop(soot.jimple.toolkits.annotation.logic.Loop,soot.SootMethod)>
